plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.openapi.generator' version '7.6.0'
}

group = 'com.accenture'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
}
configurations.configureEach {
    exclude group: 'org.slf4j', module: 'slf4j-simple'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-webflux') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }

    implementation 'org.projectlombok:lombok:1.18.34'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.17.0'
    implementation 'org.openapitools:openapi-generator-gradle-plugin:7.6.0'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webflux-ui', version: '2.6.0'
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/static/open-api.yaml"
    outputDir = layout.buildDirectory.dir("generated").get().toString()
    apiPackage = "com.accenture.franchises.openapi.api"
    modelPackage = "com.accenture.franchises.openapi.model"
    invokerPackage = "com.accenture.franchises.invoker"
    modelNameSuffix = "Dto"
    configOptions = [
            annotationLibrary    : "none",
            dateLibrary          : "java8",
            documentationProvider: "none",
            library              : "spring-boot",
            reactive             : "true",
            openApiNullable      : "false",
            useBeanValidation    : "true",
            useSpringBoot3       : "true",
            useSwaggerUI         : "true",
            interfaceOnly        : "true",
            serializableModel    : "true",
            modelBuilder         : "true"
    ]
    globalProperties = [
            "skipFormModel": "false"
    ]
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}

tasks.compileJava {
    dependsOn tasks.openApiGenerate
}

